repeat wait() until game:IsLoaded()
local kbs = {}
for i, v in pairs(game.Workspace:GetDescendants()) do
    if v:FindFirstChild("TouchInterest")  and  v.Name ~= "OrderField" and v.Name ~= "SolanBall" and v.Name ~= "SolansGate" and v.Name ~= "TeleportOut" and v.Name ~= "BaalField" and v.Name ~= "Elevator" and v.Name ~= "MageField" and v.Name ~= "TeleportIn"then
        table.insert(kbs,v)
        end
end

    
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()
local FlySpeed = 150;
local UIS = game:GetService("UserInputService")
local Player = game:GetService("Players").LocalPlayer
local Camera = workspace.Camera
getgenv().Toggled = false;

local holdingWKey = false
local holdingSKey = false
local atbdist = 3
local atb
local lp = game:GetService("Players").LocalPlayer
game:GetService("RunService").RenderStepped:Connect(function()
if atb == true and lp.Character ~= nil then
    for i, v in pairs(game.Players:GetPlayers()) do 
        if v ~= lp and v.Character ~= nil and v.Character:FindFirstChild("HumanoidRootPart") and lp.Character:FindFirstChild("HumanoidRootPart") and (lp.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).Magnitude < 20 then
            lp.Character.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame + v.Character.HumanoidRootPart.CFrame.LookVector * atbdist * -1
            end
        end
    end
end)

UIS.InputBegan:Connect(function(inputObject) 
    if(inputObject.KeyCode==Enum.KeyCode.W)then
        holdingWKey = true

    end
end)

UIS.InputEnded:Connect(function(inputObject)
    if(inputObject.KeyCode==Enum.KeyCode.W)then
        holdingWKey = false
    end
end)


UIS.InputBegan:Connect(function(inputObject) 
    if(inputObject.KeyCode==Enum.KeyCode.S)then
        holdingSKey = true

    end
end)

UIS.InputEnded:Connect(function(inputObject)
    if(inputObject.KeyCode==Enum.KeyCode.S)then
        holdingSKey = false
    end
end)




game:GetService'RunService'.RenderStepped:Connect(function()
    if (getgenv().Toggled == true and Player.Character and Player.Character:FindFirstChild('HumanoidRootPart')) then
if holdingWKey == true then
Player.Character.HumanoidRootPart.Velocity = Camera.CFrame.LookVector * FlySpeed;
end
if holdingSKey == true then
  Player.Character.HumanoidRootPart.Velocity = Camera.CFrame.LookVector * FlySpeed * -1;

end

if holdingSKey == false and holdingWKey == false then
    Player.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
end
end

end)

game:GetService'RunService'.RenderStepped:Connect(function()
    if (getgenv().Toggled == true and Player.Character and Player.Character:FindFirstChild('HumanoidRootPart')) then
        Player.Character.HumanoidRootPart.Velocity = Camera.CFrame.LookVector * FlySpeed;
    end;
end)


game:GetService'RunService'.RenderStepped:Connect(function()
    if (getgenv().Toggled == true and Player.Character and Player.Character:FindFirstChild('HumanoidRootPart')) then
        Player.Character.HumanoidRootPart.Velocity = Camera.CFrame.LookVector * FlySpeed;
    end;
end)
local Window = Rayfield:CreateWindow({
	Name = "Rogue Copy Destroyer",
	LoadingTitle = "Rogue Copy Destroyer",
	LoadingSubtitle = "made by shart",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Copy Destroyer"
	},
        Discord = {
        	Enabled = false,
        	Invite = "sirius", -- The Discord invite code, do not include discord.gg/
        	RememberJoins = false -- Set this to false to make them join the discord every time they load it up
        },
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Rogue Hub",
		Subtitle = "Key System",
		Note = "Be A Tester For Key!",
		FileName = "RogueHub",
		SaveKey = true,
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = "gavin"
	}
})
local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image
local old
local nofall = true
local hook = hookfunction or detour_function

old = hook(Instance.new("RemoteEvent").FireServer, function(self,...)
    local args = {...}
    
    if nofall == true and self.Name == "ApplyFallDamage" then
            return nil
            

    end

    return old(self,...)
end)

local ap
game:GetService("RunService").Heartbeat:Connect(function()
if ap == true and game.Players.LocalPlayer.Character ~= nil and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
    local hrp = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    for i, v in pairs(game.workspace.Trinkets:GetChildren()) do
        if (hrp.Position - v.Position).Magnitude < 20 then
            fireclickdetector(v.ClickPart.ClickDetector)
            end
        end
    end
end)
local Toggle = Tab:CreateToggle({
	Name = "No Fall",
	CurrentValue = false,
	Flag = "NOFALL", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
nofall = Value
	end,
})
local ESP = loadstring(game:HttpGet("https://kiriot22.com/releases/ESP.lua"))()

ESP.Boxes = false
ESP.Names = true
ESP:Toggle(true)
ESP.Players = false
 
game.Workspace.Trinkets.ChildAdded:Connect(function(child)
   ESP:Add(child, {
            Name = "Trinket",
            Color = BrickColor.new("Magenta").Color,
            IsEnabled = "Trinky"
        })
end)

for i, child in pairs(game.Workspace.Trinkets:GetChildren()) do 
   ESP:Add(child, {
            Name = "Trinket",
            Color = BrickColor.new("Magenta").Color,
            IsEnabled = "Trinky"
        })
end
ESP.Trinky = false
local Toggle = Tab:CreateToggle({
	Name = "Trinket Esp",
	CurrentValue = false,
	Flag = "TESP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
ESP.Trinky = Value
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Trinket Auto Pickup",
	CurrentValue = false,
	Flag = "AUTOP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
ap = Value
	end,
})
local Toggle = Tab:CreateToggle({
	Name = "Player Esp",
	CurrentValue = false,
	Flag = "PESP", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
ESP.Players = Value
	end,
})
local FTOG = Tab:CreateToggle({
	Name = "Fly",
	CurrentValue = false,
	Flag = "FLY", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
getgenv().Toggled = Value
	end,
})

local Keybind = Tab:CreateKeybind({
	Name = "Fly Keybind",
	CurrentKeybind = "Z",
	HoldToInteract = false,
	Flag = "FLYKB", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Keybind)
	if getgenv().Toggled == false then
        FTOG:Set(true)
    else
        FTOG:Set(false)
    end

    end,
})
local Toggle = Tab:CreateToggle({
	Name = "Attach To Back",
	CurrentValue = false,
	Flag = "ATB", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
atb = Value
	end,
})
local Slider = Tab:CreateSlider({
	Name = "Attach To Back Distance",
	Range = {0, 10},
	Increment = 1,
	Suffix = "Studs",
	CurrentValue = 3,
	Flag = "ATBD", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
atbdist = Value
	end,
})
local Toggle = Tab:CreateToggle({
	Name = "No Kill Bricks",
	CurrentValue = false,
	Flag = "NOKBS", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
for i, v in pairs(kbs) do
v.CanTouch = not Value
end

	end,
})

Rayfield:LoadConfiguration()
if syn and syn.queue_on_teleport then
        syn.queue_on_teleport([[loadstring(game:HttpGet("https://raw.githubusercontent.com/idontknowwhattonamemyself/Universal-Rogue-Copy-Script/Lua/Main"))()]])
end
